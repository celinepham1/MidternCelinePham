Please answer the below Data Structure Questions:

why do we need data structure?
A. We need data structures for a systematic algorithms. It allows for reusability as well as abstraction. It also allows for easier data manipulation.


What are the various operations that can be performed on different Data Structures?
Some operations are push, pop, insertion, deletion, searching, and sorting
List out the areas in which data structures are applied extensively?
Map and collection
what is an Array?
An array is a variable where you can hold multiple values.
what is the difference between the Array and ArrayList?
ArrayList is a an object whereas Array is a variable
what is LinkedList?
LinkedList is an instance that uses notes with addresses to link. It also is a much easier and faster way for data manipulation
How is an Array different from Linked List?
Array is a variable whereas Linkedlist is an instance. Linked List also uses notes.
what is queue?
A data structure that is open in both ends. It follows FIFO.
what is stack?
A data structure that extends Vector and stack is not thread safe. It follows FILO/LIFO
what is FIFO and LIFO?
Last in first out. Last in first out.
what is the order of complexity?
Array, stack, queue, singly-linked list, doubly-linked list, hash table
what is the best case to search an element from an array?
O(1)
what is the best case to search an element from an array?
O(N)
what is tree in data structure?
Tree is nonlinear that consists of nodes that stores values and list.
what is graph in data structure?
Graph in data structure is nonlinear and consists of nodes and edges to connect the nodes.
what is the difference between the HashTable and HashMap?
Hashtable does not allow null keys or values and HashMap allows multiple null values and one null key
What are the major data structures used in the following areas : RDBMS, Network data model and Hierarchical data model.
RDBMS uses SQL,MYSQL,arrays. Network data model uses graphs and queue. Hierarchical data model uses trees.
How HashMap works in java?
HashMap uses set of entries where each entry consists of a key and a value.
What is ArrayIndexOutOfBoundsException in java? When it occurs?
It occurs doing runtime and it is when a array is accessed with an illegal index
What are the different ways of copying an array into another array?
Iterating, arraycopy method, clone method
What is difference between an array and a linked list?
Array is a variable whereas Linkedlist is an instance. Linked List also uses notes.
What is DFS and BFS?
DFS is depth first search that uses stack data structure. BFS is breadth first search used queue to find shortest path
What is Recursion?
When a function is calling itself
What are linear and non linear data Structures?
Linear data structure allows data to connect sequentially. Non linear data structure connects data hierarchically
What is Big-(O)-notation?
It is a math notation that describes the limiting behavior of a function.
Outlined different kind of sorting algorithm with time complexity?
Selection sort Best:Ω(n^2) Avg:θ(n^2) Worst: O(n^2)
Insertion sort Best:Ω(n) Avg:θ(n^2) Worst: O(n^2)
Merge sort Best:Ω(n log(n)) Avg:θ(n log(n)) Worst: O(n log(n))
Draw a table with time complexity in which it will summarize all the data structure feature's advantages and disadvantages.
  a)In terms of Accessing element.
  b)In terms of Inserting element.
  c)In terms of Searching element.
  d)In terms of Removing element.
Best time complexity:
Array: Access:O(1) Search:O(1) Insert:O(1) Remove:O(1)
Stack: Access:O(1) Search:O(1) Insert:O(1) Remove:O(1)
Queue: Access:O(1) Search:O(1) Insert:O(1) Remove:O(1)
SinglyLinkedList: Access:O(1) Search:O(1) Insert:O(1) Remove:O(1)
DoublyLinkedList: Access:O(1) Search:O(1) Insert:O(1) Remove:O(1)
HashTable: Access:O(1) Search:O(1) Insert:O(1) Remove:O(1)

Worst time complexity:
Array: Access:O(1) Search:O(N) Insert:O(N) Remove:O(N)
Stack: Access:O(N) Search:O(N) Insert:O(1) Remove:O(1)
Queue: Access:O(N) Search:O(N) Insert:O(1) Remove:O(1)
SinglyLinkedList: Access:O(N) Search:O(N) Insert:O(N) Remove:O(N)
DoublyLinkedList: Access:O(N) Search:O(N) Insert:O(1) Remove:O(1)
HashTable: Access:O(N) Search:O(N) Insert:O(N) Remove:O(N)